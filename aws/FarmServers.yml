AWSTemplateFormatVersion: "2010-09-09"

Description: The setup for our farm servers and components

Parameters:
  NetworkingStack:
    Description: Our VPCs stack name
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"
  PublicServerUD:
    Description: cloud-init directives for public network server
    Type: String
  InternalServerUD:
    Description: cloud-init directives for private network server
    Type: String
  K3sServerUD:
    Description: cloud-init directives for K3s master server
    Type: String
  K3sWorkerUD:
    Description: cloud-init directives for K3s worker server
    Type: String
  ConfigBucket:
    Description: S3 Bucket to be used to maintian config and script files for servers
    Type: String


Resources:
  FarmBastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow the necessary communication to bastion server
      VpcId:
        Fn::ImportValue: !Sub '${NetworkingStack}-FarmVpc'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          # Everything but
          # Specific IPs /32 for maximum security
          CidrIp: 0.0.0.0/0
          Description: 'Certain IP to allow'


  FarmInternalServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow the necessary communication from/to the farm servers
      VpcId:
        Fn::ImportValue: !Sub '${NetworkingStack}-FarmVpc'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 500
          Description: 'Farm public subnet servers (bastion)'
          CidrIp:
            Fn::ImportValue: !Sub '${NetworkingStack}-FarmVpcPublicSubnetCidr'

  # Add needed components for web traffic
  FarmPublicNetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow the web communication
      VpcId:
        Fn::ImportValue: !Sub '${NetworkingStack}-FarmVpc'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: 'HTTP Internet traffic'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: 'HTTPS Internet traffic'

  FarmCFWebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: farm-cloudflare-rules
      GroupDescription: Allow internet facing CloudFlare only communication to network load balancer
      VpcId:
        Fn::ImportValue: !Sub '${NetworkingStack}-FarmVpc'
      SecurityGroupIngress:
        # CloudFlare IPs
        # https://www.cloudflare.com/ips-v4
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 173.245.48.0/20
          Description: 'HTTP traffic'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 173.245.48.0/20
          Description: 'HTTPS traffic'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 103.21.244.0/22
          Description: 'HTTP traffic'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 103.21.244.0/22
          Description: 'HTTPS traffic'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 103.22.200.0/22
          Description: 'HTTP traffic'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 103.22.200.0/22
          Description: 'HTTPS traffic'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 103.31.4.0/22
          Description: 'HTTP traffic'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 103.31.4.0/22
          Description: 'HTTPS traffic'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 141.101.64.0/18
          Description: 'HTTP traffic'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 141.101.64.0/18
          Description: 'HTTPS traffic'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 108.162.192.0/18
          Description: 'HTTP traffic'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 108.162.192.0/18
          Description: 'HTTPS traffic'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 190.93.240.0/20
          Description: 'HTTP traffic'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 190.93.240.0/20
          Description: 'HTTPS traffic'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 188.114.96.0/20
          Description: 'HTTP traffic'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 188.114.96.0/20
          Description: 'HTTPS traffic'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 197.234.240.0/22
          Description: 'HTTP traffic'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 197.234.240.0/22
          Description: 'HTTPS traffic'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 198.41.128.0/17
          Description: 'HTTP traffic'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 198.41.128.0/17
          Description: 'HTTPS traffic'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 162.158.0.0/15
          Description: 'HTTP traffic'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 162.158.0.0/15
          Description: 'HTTPS traffic'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 104.16.0.0/13
          Description: 'HTTP traffic'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 104.16.0.0/13
          Description: 'HTTPS traffic'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 104.24.0.0/14
          Description: 'HTTP traffic'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 104.24.0.0/14
          Description: 'HTTPS traffic'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 172.64.0.0/13
          Description: 'HTTP traffic'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 172.64.0.0/13
          Description: 'HTTPS traffic'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 131.0.72.0/22
          Description: 'HTTP traffic'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 131.0.72.0/22
          Description: 'HTTPS traffic'


  FarmMainServer:
    Description: The main server for deploying microservices
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0e3ba8d178c4b6a4b
      InstanceType: t2.medium
      KeyName: 'farm-key'
      UserData: !Ref InternalServerUD
      SecurityGroupIds:
        - !GetAtt FarmInternalServerSecurityGroup.GroupId
        - !GetAtt FarmCFWebSecurityGroup.GroupId
        - !GetAtt FarmBastionSecurityGroup.GroupId
      SubnetId:
        Fn::ImportValue: !Sub '${NetworkingStack}-FarmVpcNormalSubnet'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp3
            VolumeSize: 8
            DeleteOnTermination: true
            Encrypted: true
      Tags:
        - Key: Name
          Value: farm-main-server

  FarmMainServerVol:
    Type: AWS::EC2::Volume
    Properties:
      VolumeType: gp3
      Size: 14
      #AvailabilityZone: !GetAtt FarmMainServer.AvailabilityZone
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: 'AWS::Region'
      Encrypted: true
      SnapshotId: snap-0f9d66d8f0b401393
      Tags:
        - Key: Name
          Value: farm-main-volume
    DeletionPolicy: Retain

  FarmMainVolMount:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref FarmMainServer
      VolumeId: !Ref FarmMainServerVol
      Device: /dev/xvdf


  # Network Load Balancer setup

  # Add IP address to be publicly served. We need one for each target group.
  FarmEIP:
    Description: An elastic IP for traffic
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: farm-EIP

  FarmEIPtoServer:
    Description: Associate to instance
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt FarmEIP.AllocationId
      InstanceId: !Ref FarmMainServer

#  FarmNetworkLoadBalancer:
#    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
#    Properties:
#      Name: 'farm-traffic-NLB'
#      SubnetMappings:
#        - AllocationId: !GetAtt FarmEIP.AllocationId
#          SubnetId:
#            Fn::ImportValue: !Sub '${NetworkingStack}-FarmVpcPublicSubnet'
#      Type: network
#
#  FarmNLBSSHTargetGroup:
#    Type: AWS::ElasticLoadBalancingV2::TargetGroup
#    Properties:
#      Name: 'farm-ssh-TG'
#      VpcId:
#        Fn::ImportValue: !Sub '${NetworkingStack}-FarmVpc'
#      Port: 22
#      Protocol: TCP
#      TargetType: instance
#      Targets:
#        - Id: !Ref FarmMainServer
#
#  FarmNLBHTTPTargetGroup:
#    Type: AWS::ElasticLoadBalancingV2::TargetGroup
#    Properties:
#      Name: 'farm-http-TG'
#      VpcId:
#        Fn::ImportValue: !Sub '${NetworkingStack}-FarmVpc'
#      Port: 80
#      Protocol: TCP
#      TargetType: instance
#      Targets:
#        - Id: !Ref FarmMainServer
#
#  FarmNLBHTTPSTargetGroup:
#    Type: AWS::ElasticLoadBalancingV2::TargetGroup
#    Properties:
#      Name: 'farm-https-TG'
#      VpcId:
#        Fn::ImportValue: !Sub '${NetworkingStack}-FarmVpc'
#      Port: 443
#      Protocol: TCP
#      TargetType: instance
#      Targets:
#        - Id: !Ref FarmMainServer
#
#  FarmLoadBalancerSSHListener:
#    Type: AWS::ElasticLoadBalancingV2::Listener
#    Properties:
#      LoadBalancerArn: !Ref FarmNetworkLoadBalancer
#      Port: 22884
#      Protocol: TCP
#      DefaultActions:
#        - Type: forward
#          TargetGroupArn: !Ref FarmNLBSSHTargetGroup
#
#  FarmLoadBalancerHTTPListener:
#    Type: AWS::ElasticLoadBalancingV2::Listener
#    Properties:
#      LoadBalancerArn: !Ref FarmNetworkLoadBalancer
#      Port: 80
#      Protocol: TCP
#      DefaultActions:
#        - Type: forward
#          TargetGroupArn: !Ref FarmNLBHTTPTargetGroup
#
#  FarmLoadBalancerHTTPSListener:
#    Type: AWS::ElasticLoadBalancingV2::Listener
#    Properties:
#      LoadBalancerArn: !Ref FarmNetworkLoadBalancer
#      Port: 443
#      Protocol: TCP
#      DefaultActions:
#        - Type: forward
#          TargetGroupArn: !Ref FarmNLBHTTPSTargetGroup
